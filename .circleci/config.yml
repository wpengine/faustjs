# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
version: 2.1
orbs:
  wp-product-orb: wpengine/wp-product-orb@1.3.0
  php: circleci/php@1.1.0
  node: circleci/node@4.1.0

jobs:
  checkout:
    executor: wp-product-orb/default
    steps:
      - checkout
      - persist_to_workspace:
          root: .
          paths:
            - .

  plugin-checkout:
    executor: wp-product-orb/default
    working_directory: ~/project/plugins/<<parameters.slug>>
    environment:
      WPE_SESSION_DIR: ./.wpe
    parameters:
      slug:
        type: string
      filename:
        type: string
    steps:
      - attach_workspace:
          at: ~/project
      - run:
          name: Make artifacts build directory
          command: |
            [ ! -d "build" ] && mkdir build &>/dev/null
      - wp-product-orb/get-version-from-php:
          filename: <<parameters.filename>>
          return_var: BUILD_VERSION
      - wp-product-orb/variable:
          var: BUILD_VERSION
          value: $BUILD_VERSION
      - persist_to_workspace:
          root: ~/project
          paths:
            - plugins/<<parameters.slug>>

  plugin-composer:
    executor: php/default
    working_directory: ~/project/plugins/<<parameters.slug>>
    parameters:
      slug:
        type: string
    steps:
      - attach_workspace:
          at: ~/project
      - php/install-composer
      - php/install-packages:
          app-dir: .
      - run:
          name: Composer PHP lint and code sniffer
          command: |
            /usr/local/bin/composer lint && /usr/local/bin/composer phpcs
            rm -v composer-setup.php
          working_directory: .
      - persist_to_workspace:
          root: ~/project
          paths:
            - plugins/<<parameters.slug>>

  plugin-test:
    working_directory: ~/project/plugins/<<parameters.slug>>
    docker:
      - image: cimg/php:7.4
      - image: circleci/mysql:5.7
        environment:
          MYSQL_DATABASE: wp_database
          MYSQL_USER: wp_user
          MYSQL_PASSWORD: wp_pass
          MYSQL_ROOT_PASSWORD: password
    parameters:
      slug:
        type: string
    steps:
      - attach_workspace:
          at: ~/project
      - php/install-composer
      - php/install-packages:
          app-dir: .
      - run:
          name: Install Subversion package
          command: |
            sudo apt-get update -yq
            sudo apt-get install subversion -yq
      - run:
          name: Setup WordPress testing framework
          command: |
            /bin/bash tests/install-wp-tests.sh wp_database wp_user wp_pass 127.0.0.1 latest true
          working_directory: .
      - run:
          name: Run testing suite
          command: |
            composer test
          working_directory: .

  plugin-bundle-zip:
    executor: wp-product-orb/default
    working_directory: ~/project/plugins/<<parameters.slug>>
    environment:
      WPE_SESSION_DIR: ./.wpe
    parameters:
      slug:
        type: string
    steps:
      - attach_workspace:
          at: ~/project
      - wp-product-orb/variable-load
      - run:
          name: "Bundle plugin files into a zip"
          command: |
            cd ..
            zip --verbose -x@<<parameters.slug>>/.zipignore -x *.wpe/* */build/ -r "<<parameters.slug>>/build/<<parameters.slug>>.$BUILD_VERSION.zip" <<parameters.slug>>
      - store_artifacts:
          path: build
      - persist_to_workspace:
          root: ~/project
          paths:
            - plugins/<<parameters.slug>>/build

  plugin-bundle-json:
    executor: wp-product-orb/parser
    working_directory: ~/project/plugins/<<parameters.slug>>
    environment:
      WPE_SESSION_DIR: ./.wpe
    parameters:
      slug:
        type: string
    steps:
      - attach_workspace:
          at: ~/project
      - wp-product-orb/variable-load
      - wp-product-orb/parse-wp-readme:
          infile: readme.txt
          outfile: build/<<parameters.slug>>.$BUILD_VERSION.json
      - store_artifacts:
          path: build
      - persist_to_workspace:
          root: ~/project
          paths:
            - plugins/<<parameters.slug>>/build

  plugin-deploy:
    executor: wp-product-orb/authenticate
    working_directory: ~/project/plugins/<<parameters.slug>>
    environment:
      WPE_SESSION_DIR: ./.wpe
    parameters:
      auth_url:
        type: string
      upload_url:
        type: string
      slug:
        type: string
    steps:
      - attach_workspace:
          at: ~/project
      - wp-product-orb/variable-load
      - wp-product-orb/authenticate:
          user: WPE_LDAP_USER
          pass: WPE_LDAP_PASS
          url: <<parameters.auth_url>>
      - wp-product-orb/post-zip:
          url: <<parameters.upload_url>>/<<parameters.slug>>
          zip: build/<<parameters.slug>>.$BUILD_VERSION.zip
          json: build/<<parameters.slug>>.$BUILD_VERSION.json
          version: $BUILD_VERSION

  package-build:
    executor:
      name: node/default
      tag: lts
    working_directory: ~/project/packages/headless
    steps:
      - attach_workspace:
          at: ~/project
      - node/install-packages
      - run:
          name: NPM package install and build
          command: |
            npm run build
      - persist_to_workspace:
          root: ~/project
          paths:
            - packages/headless

  package-test:
    executor:
      name: node/default
      tag: lts
    working_directory: ~/project/packages/headless
    steps:
      - attach_workspace:
          at: ~/project
      - node/install-packages
      - run:
          name: NPM package tests
          command: |
            npm run test

  package-publish:
    executor:
      name: node/default
      tag: lts
    working_directory: ~/project/packages/headless
    parameters:
      args:
        type: string
        default: --dry-run
    steps:
      - attach_workspace:
          at: ~/project
      - run:
          name: Authenticate with registry
          command: echo "//registry.npmjs.org/:_authToken=$NPM_API_KEY" > ~/project/packages/headless/.npmrc
      - run:
          name: NPM package publish
          command: |
            npm publish <<parameters.args>>

  test-e2e:
    machine:
      image: ubuntu-2004:202010-01
    working_directory: ~/project
    steps:
      - attach_workspace:
          at: ~/project
      - php/install-php:
          version: '7.4'
      - node/install-packages
      - run:
          name: E2E tests
          command: |
            npm run wp:start && npm run cypress:run && npm run wp:stop


workflows:
  # Workflows defined for each package and plugin.
  # tag example for deploying an update for wpe-headless: plugin/wpe-headless/1.0.0
  plugin-wpe-headless:
    jobs:
      - checkout:
          filters:
            tags:
              only: /.*/
      - plugin-checkout:
          name: plugin-checkout-wpe-headless
          slug: wpe-headless
          filename: wpe-headless.php
          requires:
            - checkout
          # Enable running this job when a tag is published
          filters:
            tags:
              only: /.*/
      - plugin-composer:
          name: plugin-composer-wpe-headless
          slug: wpe-headless
          requires:
            - plugin-checkout-wpe-headless
          # Enable running this job when a tag is published
          filters:
            tags:
              only: /.*/
      - plugin-test:
          name: plugin-test-wpe-headless
          slug: wpe-headless
          requires:
            - plugin-composer-wpe-headless
          # Enable running this job when a tag is published
          filters:
            tags:
              only: /.*/
      - plugin-bundle-zip:
          name: plugin-bundle-zip-wpe-headless
          slug: wpe-headless
          requires:
            - plugin-test-wpe-headless
          # Run this job on every commit/PR so the plugin is available as a build artifact
          filters:
            tags:
              only: /.*/
      - plugin-bundle-json:
          name: plugin-bundle-json-wpe-headless
          slug: wpe-headless
          requires:
            - plugin-test-wpe-headless
          # Run this job on every commit/PR to make sure it's in working order prior to deploying
          filters:
            tags:
              only: /.*/
      - plugin-deploy:
          name: "Deploy zip to api (staging) wpe-headless"
          slug: wpe-headless
          requires:
            - plugin-bundle-zip-wpe-headless
            - plugin-bundle-json-wpe-headless
          filters:
            branches:
              only:
                - main
                - canary
            tags:
              only: /.*/
          context: wpe-ldap-creds
          auth_url: https://auth-staging.wpengine.io/v1/tokens
          upload_url: https://wp-product-info-staging.wpesvc.net/v1/plugins
      - plugin-deploy:
          name: "Deploy zip to api (production) wpe-headless"
          slug: wpe-headless
          requires:
            - "Deploy zip to api (staging) wpe-headless"
          filters:
            branches:
              ignore: /.*/
            tags:
              # tag ex. plugin/wpe-headless/1.0.0
              only: /^plugin\/wpe-headless\/\S+/
          context: wpe-ldap-creds
          auth_url: https://auth.wpengine.io/v1/tokens
          upload_url: https://wp-product-info.wpesvc.net/v1/plugins

  package-headless:
    jobs:
      - checkout:
          filters:
            tags:
              only: /.*/
      - package-build:
          requires:
            - checkout
          # Enable running this job when a tag is published
          filters:
            tags:
              only: /.*/
      - package-test:
          requires:
            - package-build
          # Enable running this job when a tag is published
          filters:
            tags:
              only: /.*/
      - package-publish:
          name: "NPM Publish (Dry Run)"
          requires:
            - package-test
          filters:
            branches:
              only:
                - main
                - canary
            tags:
              only: /.*/
          context: wpe-npm-creds
      - package-publish:
          name: "NPM Publish"
          requires:
            - "NPM Publish (Dry Run)"
          filters:
            branches:
              ignore: /.*/
            tags:
              # tag ex. package/headless/1.0.0
              only: /^package\/headless\/\S+/
          context: wpe-npm-creds
          args: ""

  test-end-2-end:
    jobs:
      - checkout:
          filters:
            tags:
              only: /.*/
      - test-e2e:
          # Enable running this job when a tag is published
          requires:
            - checkout
          filters:
            tags:
              only: /.*/
